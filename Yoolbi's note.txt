프로젝트 설명 

흐름 

컨트롤러 / 도메인/ 메퍼 / 서비스 

리소스 -> 메퍼 
크게 나눠져 있음 

필요한 라이브러리 추가 > build,gradle 에 추가  (코끼리에 / 디펜던시 추가) 

소스0> 메인 자바 안에0> 실행이 어떻게 되냐 
컨트롤러 부터 시작 / 서비스 부름 / 서비스-> 메퍼로 감 /xml 에서 오라클에서 db 값을 부름

예) 디비 오라클-> 데이터 똑같이 postVO 에 적어줘야 함 (필요한 변수들을)

vo 안에 새로운 기능들을 정의할거면 vo 로 적고  / dto 더 간단한 버전이다 vo 랑 비슷하긴함
도메인 안에 이런 변수를 넣는다

그다음 -> 메퍼 ! 

인터페이스 (틀이다 ) 
메퍼는 2개 있어야 함 / 인터페이스 (자바 코드 안에 있는거( / 하나는 리소스 메퍼 안에 있는 메퍼 (xml 파일)

메인에 있는건 인터페이스다
ㅇ예)포스트 받아온다/ 삭제 포스트/ 등을 적고 코드를 만듬 (xml 에 / 하나하나 다 똑같이 적어야 함)

select id 스펠링 철저히 꼼꼼히 확인할 것 
getallpost  모든 포스트를 받아온다 

유저 아이디 값 받아오면 -> postvo 로 넣어진다 

insert 는 포스트 안에 있는 그 값을 넣는다 라는 의미 

포스트메퍼를 쓸 서비스를 만든다-> 인터페이스를 알아야 함 / 포스트 서비스 (인터페이스) + 포스트임플(impl) = 
= 메퍼에 있던 내용 똑같이 그대로 써도 됨  (메퍼면 위에 @mapper  라고 적어주기)
그리고 오버라이드 다 해서 재정의를 해준다 (impl 에서 재정의 해준다)

서비스- 메퍼사용-메퍼에서는 post 메퍼거의 이걸 사용한다 라는 의미

포스트 아이디를 먼저 생성하고 적어주기 위에걸 
return 을 get 하는건 vo 의 리스트를 받을 거기 때문 (= 여러 데이터들을 받을거기때문)

insert나  delete 는 따로 받을게 없어서 안했음 (이번엔)

--------------
컨트롤러!!!  = 다 쓰는 곳 

@RestController 꼭꼭꼭 써줘야 함 !! 
@requestmapping ("/upload") 라고도 써주면 좋음 
@log 프린트 하는애 있음 쓰고

get이면 getmapping 하고 주소 써주고 
function 함수 써주고 
컨트롤러는 서비스를 쓰는 애다. (return postService.getAllPost();)

get 다 해주고, 유저별로 하면 requestparam 하면 파라미터 (받을 정보를 이걸로 받아온다는 뜻)
그럼 호출할 때 /post/get?user_id=dkfalfj ) 이런식으로 하면 이렇게 값을 받는 것을 의미 

검색도 String의 serach 를 넣어주고

user 도 똑같이 userVO 를 받을 것임 / (그 안에 적인 정보들을)
받아서 서비스의 inseruser 를 받을거다. 

바디는 json 형식으로  중괄호 안에 user_id:"" 다~~ 이런식 

파일은 multipart받고 바이트 받아와서 설정해주고 에러나면 받아주고 
삭제하면 아이디 받아오면 삭제deletpost 해서 해주기

회원가입은 post 에 있다 

로그인-> requestbody 해서 
이메일별로 유저를 받아와라 한거 (getuserbyemail 

포스트는 파일형식이 어려워서 

user를 
get / 등록 / 삭제

포스트를 파일없이 string 으로만 ! 
이름만 받는다고 생각하고 해보기 

포스트만 해보기  -> 난 포스트 만들기 해보기 포스트-> 유저로 !  